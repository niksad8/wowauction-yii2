<?php


namespace app\controllers;


use app\models\Factions;
use app\models\ItemTemplate;
use app\models\Professions;
use app\models\Realm;
use app\models\ScanStats;
use app\models\Servers;
use yii\filters\auth\HttpBasicAuth;
use yii\filters\Cors;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Response;

class ApiController extends Controller
{
    public function behaviors() {
        $behaviors = parent::behaviors();

        // remove authentication filter necessary because we need to
        // add CORS filter and it should be added after the CORS
        //unset($behaviors['authenticator']);

        // add CORS filter
        $behaviors['corsFilter'] = [
            'class' => '\yii\filters\Cors',
            'cors' => [
                'Origin' => ['*'],
                'Access-Control-Request-Method' => ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],
                'Access-Control-Request-Headers' => ['*'],
            ],
        ];

        // re-add authentication filter of your choce
        /*$behaviors['authenticator'] = [
            'class' => HttpBasicAuth::class
        ];*/

        // avoid authentication on CORS-pre-flight requests (HTTP OPTIONS method)
        //$behaviors['authenticator']['except'] = ['options'];
        return $behaviors;
    }
    public function afterAction($action, $result)
    {
        header("Cache-Control: private");
        $dt = new \DateTime();
        header("Expires: 01 Jan 2001");
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

    public $enableCsrfValidation = false;
    public function actionIndex(){
        echo 'Welcome to API for WoWAuctioneer';
    }
    public function actionGetFullServerlist(){
        $servers = Servers::find()->all();
        $out = [];
        foreach($servers as $server){
            $out[$server->id] = $server->getAttributes();
            $out[$server->id]['img'] ="/images/servers/".$server->id;
        }
        $realms = Realm::find()->all();
        foreach($realms as $realm){
            if(isset($out[$realm->server_id]))
                $out[$realm->server_id]['realms'][] =$realm->getAttributes();
        }
        $final_out= [];
        foreach($out as $server){
            $final_out[] = $server;
        }
        return $this->asJson($final_out);
    }
    public function actionGetServers(){
        $id = \Yii::$app->request->get("id");
        $servers = null;
        if($id != "")
            $servers = Servers::findAll(['id'=>$id]);
        else
            $servers = Servers::find()->all();

        $out = [];
        foreach($servers as $server){
            $x =$server->getAttributes();
            $x['img'] = "/images/servers/".$x['id'];
            $out[] = $x;
        }
        return $this->asJson($out);
    }
    public function actionGetRealms(){
        $id = \Yii::$app->request->get("id");
        $server_id = \Yii::$app->request->get("server_id");
        if($id != "") {
            if($server_id == "")
                $realms = Realm::findAll(['id' => $id]);
            else
                $realms = Realm::findAll(['id' => $id,'server_id'=>$server_id]);
        }
        else {
            if($server_id == "")
                $realms = Realm::find()->all();
            else
                $realms = Realm::findAll(['server_id'=>$server_id]);
        }
        $out = [];
        foreach($realms as $realm){
            $scans = ScanStats::findBySql("SELECT ss.* from scan_stats ss where realm_id='".$realm->id."' and `datetime`=(select max(datetime) from scan_stats ss2 where ss2.faction_id=ss.faction_id and ss2.realm_id=ss.realm_id) group by realm_id,faction_id;")->indexBy("faction_id")->all();
            $x = $realm->getAttributes();
            unset($x['data']);
            $x['scan_stats'] = $scans;
            $out[] =$x;
        }
        return $this->asJson($out);
    }
    public function actionProfessionList(){
        $id = \Yii::$app->request->get("id");
        if($id != ""){
            $proffs = Professions::find()->where(['id'=>$id])->all();
        }
        else {
            $proffs = Professions::find()->all();
        }
        $out= [];
        foreach($proffs as $proff){
            $x = $proff->getAttributes();
            $x['icon_url'] = "/images/ICONS/".$x['icon_name'].".PNG";
            $out[] = $x;
        }
        return $this->asJson($out);
    }
    public function actionSearch(){
        $term = \Yii::$app->request->get("term");
        $realm_id = \Yii::$app->request->get("realm_id",0);
        $faction_id = \Yii::$app->request->get("faction_id",0);
        $realm = Realm::findOne(['id'=>$realm_id]);
        if($term == "" || strlen($term)  < 3 || $realm == null || ($faction_id != 1 && $faction_id != 2)){
            return $this->asJson(["error"=>"term cannot be empty, should be atleast 3 characters and the realm_id and faction_id have to be valid"]);
        }
        $results= ItemTemplate::findBySql("select * from item_template where `name` LIKE CONCAT('%',:query,'%') and entry in (select itemid from item_prices where realm_id=:realmid and faction_id=:factionid) limit 20;",['query'=>$term,'realmid'=>$realm_id,'factionid'=>$faction_id])->all();
        $out = [];

        foreach($results as $res){
            $item = [
                'name'=>$res->name,
                'icon'=>$res->icon->icon_name,
                'color'=>$res->getColor(),
                'price_row'=>$res->getItemprice($realm_id,$faction_id),
                'id'=>$res->entry
            ];
            $out[] = $item;
        }
        $this->asJson($out);
    }
    public function actionProfessionItems(){
        $id = \Yii::$app->request->get("id",0);
        $realm_id = \Yii::$app->request->get("realm_id",0);
        $faction_id = \Yii::$app->request->get("faction_id",0);
        $search = \Yii::$app->request->get("search","");
        $page = \Yii::$app->request->get("page",0);

        if($id == 0 || $realm_id == 0 || $faction_id == 0){
            return $this->asJson(["error"=>"profession id, realm id and faction id are needed"]);
        }
        $model = Professions::findOne(['id'=>$id]);
        $spells = $model->getAHSpells($realm_id,$faction_id,$page,$search);
        $out =[];
        foreach($spells as $spell){
            if($spell->item != null) {
                $item = $spell->item->getItemPrice();
                if ($item != NULL) {
                    $arr = [];
                    $item_template = ItemTemplate::findOne(['entry'=>$spell->result_item_id]);
                    $arr['item'] = $item_template->getBasicInformation();
                    $arr['quantity'] = $spell->result_item_quantity;
                    $arr['bid_median_amt'] = $item->bid_median;
                    $arr['buyout_median_amt'] = $item->buyout_median;
                    $arr['bid_mean_amt'] = $item->bid_mean;
                    $arr['buyout_mean_amt'] = $item->buyout_mean;
                    $arr['quantity_ah'] = $item->quantity;
                    $arr['cost_price_amt'] = $item->cost_price;
                    $arr['profit_amt'] = $item->buyout_median - $item->cost_price;
                    $arr['trend']= $item->buyout_mean_last_compare;
                    $out[] = $arr;
                }
            }
        }
        return $this->asJson($out);
    }
    public function actionItemList(){
        $scansearch = new \app\models\ItemPricesSearch();
        $dataProvider = $scansearch->search($_GET);
        $out = [];
        foreach($dataProvider->getModels() as $model){
            $out[] = $model->attributes;
        }
        return $this->asJson($out);
    }
    public function actionGetItemDetails(){
        $id = \Yii::$app->request->get("id",0);
        $realm_id = \Yii::$app->request->get("realm_id",0);
        $faction_id = \Yii::$app->request->get("faction_id",0);
        if($id == 0 || $realm_id == 0 || $faction_id == 0)
            return "Input is invalid";
        $faction = Factions::findOne(['id'=>$faction_id]);
        $realm = Realm::findOne(['id'=>$realm_id]);
        $item = ItemTemplate::findOne(['entry'=>$id]);
        if($faction == null || $realm == null || $item == null)
            return "not found";

        $qry = "SELECT * from item_prices where itemid=:id and faction_id=:fid and realm_id=:rid order by `datetime` desc limit 1";
        $price_row = \app\models\ItemPrices::findBySql($qry,[':id'=>$id,':rid'=>$realm_id, ':fid'=>$faction_id])->one();
        $out =[];
        $out = $price_row->attributes;
        $out['item_name'] = $item->name;
        $out['item_icon'] = "/images/ICONS/" . $item->icon->icon_name . ".PNG";
        $builds = $item->getBuild();
        $build_data = [];
        if (count($builds) > 0) {
            foreach ($builds as $build) {
                $costprice = \app\models\ItemPrices::find()->where(['itemid' => $build->required_itemid, 'faction_id' => $faction->id, 'realm_id' => $realm->id])->orderBy('datetime desc')->one();
                $item_template = ItemTemplate::findOne(['entry' => $build->required_itemid]);
                $obj = $costprice->attributes;
                if($build->source_type == "spell"){
                    $obj['created_quantity'] = $build->getSource()->created_amount;
                }
                else {
                    $obj['created_quantity'] = 1;
                }
                $obj['item_icon'] = "/images/ICONS/" . $item_template->icon->icon_name . ".PNG";
                $obj['item_name'] = $item_template->name;
                $obj['quantity'] = $build->quantity;
                $build_data[] = $obj;
            }
        }
        $out['build_data'] = $build_data;
        $used_id = $item->getUsedin();
        $used_data = [];
        if (count($used_id) > 0) {
            foreach ($used_id as $build) {
                $costprice = \app\models\ItemPrices::find()->where(['itemid' => $build->required_itemid, 'faction_id' => $faction->id, 'realm_id' => $realm->id])->orderBy('datetime desc')->one();
                $item_template = ItemTemplate::findOne(['entry' => $build->required_itemid]);
                $obj = $costprice->attributes;
                $obj['item_icon'] = "/images/ICONS/" . $item_template->icon->icon_name . ".PNG";
                $obj['item_name'] = $item_template->name;
                $obj['quantity'] = $build->quantity;
                $used_data[] = $obj;
            }
        }
        $out['used_in'] = $used_data;
        $chart_data = \app\models\ItemPrices::find()->where(['faction_id'=>$faction->id,'realm_id'=>$realm->id,'itemid'=>$item->entry])->orderBy('datetime')->all();
        $chart_dat = [];
        foreach($chart_data as $row){
            $chart_dat[] = [
                'quantity'=>$row->quantity,
                'bid_mean'=>$row->bid_mean,
                'bid_median'=>$row->bid_median,
                'buyout_median'=>$row->buyout_median,
                'cost_price'=>$row->cost_price,
                'timestamp' =>  (new \DateTime($row->datetime))->getTimestamp()
            ];
        }
        $out['chart_data'] = $chart_dat;
        $auctions = \app\models\AuctionItem::find()->where(['itemid'=>$item->entry,'faction'=>$faction->id,'realm_id'=>$realm->id])->orderBy('buyout')->all();
        $auc_list = [];
        foreach($auctions as $auction) {
            $auc_list[] = [
                'posted_by'=>$auction->user,
                'bid_amount'=>$auction->current_bid,
                'buyout' => $auction->buyout,
                'quantity'=>$auction->stack,
                'timeleft'=>$auction->timeleft->name
            ];
        }
        $out['auctions']=$auc_list;
        return $this->asJson($out);
    }
}